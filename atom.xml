<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>林小东的个人博客</title>
  
  <subtitle>记录最近自己的学习或者生活感悟。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.linxiaodongblog.com/"/>
  <updated>2019-03-25T01:53:30.893Z</updated>
  <id>http://www.linxiaodongblog.com/</id>
  
  <author>
    <name>林小东</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS设计模式-其他4-</title>
    <link href="http://www.linxiaodongblog.com/2019/03/25/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%85%B6%E4%BB%964-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F%20&amp;%20%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.linxiaodongblog.com/2019/03/25/JS设计模式-其他4-命令模式 &amp; 备忘录模式/</id>
    <published>2019-03-25T01:52:52.000Z</published>
    <updated>2019-03-25T01:53:30.893Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;命令模式&quot;&gt;&lt;a href=&quot;#命令模式&quot; class=&quot;headerlink&quot; title=&quot;命令模式&quot;&gt;&lt;/a&gt;命令模式&lt;/h3&gt;&lt;h5 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;执行命令时，发布者和执行者分开&lt;/li&gt;
&lt;li&gt;中间加入命令对象，作为中转站
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.linxiaodongblog.com/tags/JavaScript/"/>
    
      <category term="设计模式" scheme="http://www.linxiaodongblog.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JS设计模式-其他3-</title>
    <link href="http://www.linxiaodongblog.com/2019/03/25/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%85%B6%E4%BB%963-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%20&amp;%20%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%20&amp;%20%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.linxiaodongblog.com/2019/03/25/JS设计模式-其他3-策略模式 &amp; 模板方法模式 &amp; 职责链模式/</id>
    <published>2019-03-25T01:50:46.000Z</published>
    <updated>2019-03-25T01:51:23.526Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;策略模式&quot;&gt;&lt;a href=&quot;#策略模式&quot; class=&quot;headerlink&quot; title=&quot;策略模式&quot;&gt;&lt;/a&gt;策略模式&lt;/h3&gt;&lt;h5 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;不同策略分开处理&lt;/li&gt;
&lt;li&gt;避免出现大量 if…else 或者 switch…case
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.linxiaodongblog.com/tags/JavaScript/"/>
    
      <category term="设计模式" scheme="http://www.linxiaodongblog.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JS设计模式-其他2-组合模式</title>
    <link href="http://www.linxiaodongblog.com/2019/03/25/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%85%B6%E4%BB%962-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F%20&amp;%20%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.linxiaodongblog.com/2019/03/25/JS设计模式-其他2-组合模式 &amp; 享元模式/</id>
    <published>2019-03-25T01:49:35.000Z</published>
    <updated>2019-03-25T01:50:29.907Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;组合模式&quot;&gt;&lt;a href=&quot;#组合模式&quot; class=&quot;headerlink&quot; title=&quot;组合模式&quot;&gt;&lt;/a&gt;组合模式&lt;/h3&gt;&lt;h5 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;生成树形结构，表示 “整体-部分”&lt;/li&gt;
&lt;li&gt;让整体和部分都具有一致的操作方式&lt;br&gt;例如文件夹目录
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.linxiaodongblog.com/tags/JavaScript/"/>
    
      <category term="设计模式" scheme="http://www.linxiaodongblog.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>HTML标签-块元素</title>
    <link href="http://www.linxiaodongblog.com/2019/03/21/HTML-%E5%9D%97%E5%85%83%E7%B4%A0/"/>
    <id>http://www.linxiaodongblog.com/2019/03/21/HTML-块元素/</id>
    <published>2019-03-21T12:32:42.000Z</published>
    <updated>2019-03-21T12:39:53.440Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS设计模式-其他1-原型模式 &amp; 桥接模式</title>
    <link href="http://www.linxiaodongblog.com/2019/03/19/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%85%B6%E4%BB%961-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F%20&amp;%20%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.linxiaodongblog.com/2019/03/19/JS设计模式-其他1-原型模式 &amp; 桥接模式/</id>
    <published>2019-03-19T14:35:51.000Z</published>
    <updated>2019-03-21T03:01:57.891Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;其他设计模式系列开始介绍前端不常用的设计模式&lt;br&gt;有哪些设计模式？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建性模式&lt;br&gt;原型模式&lt;/li&gt;
&lt;li&gt;结构型模式&lt;br&gt;桥接模式  组合模式  享元模式&lt;/li&gt;
&lt;li&gt;行为型模式&lt;br&gt;策略模式 模板方法模式 职责链模式 命令模式 备忘录模式 中介者模式 访问者模式 解释器模式
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.linxiaodongblog.com/tags/JavaScript/"/>
    
      <category term="设计模式" scheme="http://www.linxiaodongblog.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JS设计模式-状态模式</title>
    <link href="http://www.linxiaodongblog.com/2019/03/17/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.linxiaodongblog.com/2019/03/17/JS设计模式-状态模式/</id>
    <published>2019-03-17T13:54:59.000Z</published>
    <updated>2019-03-17T14:56:48.973Z</updated>
    
    <summary type="html">
    
      &lt;h5 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;一个对象有状态变化&lt;/li&gt;
&lt;li&gt;每次状态变化都会触发一个逻辑&lt;/li&gt;
&lt;li&gt;不能总是使用if…else来控制&lt;br&gt;eg: 红绿灯  收藏/未收藏&lt;br&gt;核心： 状态和主体分离
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.linxiaodongblog.com/tags/JavaScript/"/>
    
      <category term="设计模式" scheme="http://www.linxiaodongblog.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JS设计模式-迭代器模式</title>
    <link href="http://www.linxiaodongblog.com/2019/03/16/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.linxiaodongblog.com/2019/03/16/JS设计模式-迭代器模式/</id>
    <published>2019-03-16T06:27:21.000Z</published>
    <updated>2019-03-16T07:37:52.840Z</updated>
    
    <summary type="html">
    
      &lt;h5 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;顺序访问一个集合&lt;/li&gt;
&lt;li&gt;使用者无需知道集合的内部结构（封装）&lt;br&gt;迭代器模式通常都是对一个数组，集合等进行访问，迭代器的设计是为了封装一个方法，可以对多种数据类型进行访问。
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.linxiaodongblog.com/tags/JavaScript/"/>
    
      <category term="设计模式" scheme="http://www.linxiaodongblog.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JS设计模式-观察者模式</title>
    <link href="http://www.linxiaodongblog.com/2019/03/12/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.linxiaodongblog.com/2019/03/12/JS设计模式-观察者模式/</id>
    <published>2019-03-12T15:11:01.000Z</published>
    <updated>2019-03-16T06:41:37.380Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;观察者模式是前端设计模式的核心&lt;/p&gt;
&lt;h5 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;发布 &amp;amp; 订阅&lt;/li&gt;
&lt;li&gt;一对多&lt;br&gt;什么是发布 &amp;amp; 订阅？
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.linxiaodongblog.com/tags/JavaScript/"/>
    
      <category term="设计模式" scheme="http://www.linxiaodongblog.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JS设计模式-外观模式</title>
    <link href="http://www.linxiaodongblog.com/2019/03/12/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.linxiaodongblog.com/2019/03/12/JS设计模式-外观模式/</id>
    <published>2019-03-12T14:56:10.000Z</published>
    <updated>2019-03-13T08:22:43.690Z</updated>
    
    <summary type="html">
    
      &lt;h5 id=&quot;什么是外观模式&quot;&gt;&lt;a href=&quot;#什么是外观模式&quot; class=&quot;headerlink&quot; title=&quot;什么是外观模式&quot;&gt;&lt;/a&gt;什么是外观模式&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;本段内容来自于 &lt;a href=&quot;https://www.cnblogs.com/adamjwh/p/9048594.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JAdam博客&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  有些人可能炒过股票，但其实大部分人都不太懂，这种没有足够了解证券知识的情况下做股票是很容易亏钱的，刚开始炒股肯定都会想，如果有个懂行的帮帮手就好，其实基金就是个好帮手，支付宝里就有许多的基金，它将投资者分散的资金集中起来，交由专业的经理人进行管理，投资于股票、债券、外汇等领域，而基金投资的收益归持有者所有，管理机构收取一定比例的托管管理费用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.linxiaodongblog.com/tags/JavaScript/"/>
    
      <category term="设计模式" scheme="http://www.linxiaodongblog.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JS设计模式-代理模式</title>
    <link href="http://www.linxiaodongblog.com/2019/03/09/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.linxiaodongblog.com/2019/03/09/JS设计模式-代理模式/</id>
    <published>2019-03-09T13:40:13.000Z</published>
    <updated>2019-03-09T14:36:54.850Z</updated>
    
    <summary type="html">
    
      &lt;h5 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;使用者无权访问目标对象&lt;/li&gt;
&lt;li&gt;中间加代理，通过代理做授权和控制&lt;br&gt;比如说公司的内网，当我们在家的时候也是需要一个代理才能连接访问内网的信息。&lt;h5 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h5&gt;&lt;/li&gt;
&lt;li&gt;科学上网，访问 github.com&lt;/li&gt;
&lt;li&gt;明星的经纪人  （大多数情况下咱们不可能直接联系明星）
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.linxiaodongblog.com/tags/JavaScript/"/>
    
      <category term="设计模式" scheme="http://www.linxiaodongblog.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JS设计模式-装饰器模式</title>
    <link href="http://www.linxiaodongblog.com/2019/03/07/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.linxiaodongblog.com/2019/03/07/JS设计模式-装饰器模式/</id>
    <published>2019-03-07T15:23:21.000Z</published>
    <updated>2019-03-07T16:53:31.712Z</updated>
    
    <summary type="html">
    
      &lt;h5 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;为对象添加新功能&lt;/li&gt;
&lt;li&gt;不改变其原有的结构和功能&lt;br&gt;和适配器模式不一样，适配器模式是原有的不能用了，而装饰器模式是原来的还能用，不过给增加一些功能。&lt;br&gt;比如： 手机壳，用来给手机美观，保护，防滑等等
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.linxiaodongblog.com/tags/JavaScript/"/>
    
      <category term="设计模式" scheme="http://www.linxiaodongblog.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JS设计模式-适配器模式</title>
    <link href="http://www.linxiaodongblog.com/2019/03/05/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.linxiaodongblog.com/2019/03/05/JS设计模式-适配器模式/</id>
    <published>2019-03-05T14:44:43.000Z</published>
    <updated>2019-03-07T16:53:33.547Z</updated>
    
    <summary type="html">
    
      &lt;h5 id=&quot;什么是适配器模式&quot;&gt;&lt;a href=&quot;#什么是适配器模式&quot; class=&quot;headerlink&quot; title=&quot;什么是适配器模式&quot;&gt;&lt;/a&gt;什么是适配器模式&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;旧接口模式和使用者不兼容&lt;/li&gt;
&lt;li&gt;中间加一个适配器转接口&lt;br&gt;比如你去香港或者出国去一些国家，他们的插排接口和我们都不一样，我要充电不能直接用，这个时候就需要一个适配器来转换一下电压。
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.linxiaodongblog.com/tags/JavaScript/"/>
    
      <category term="设计模式" scheme="http://www.linxiaodongblog.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JS设计模式-工厂模式</title>
    <link href="http://www.linxiaodongblog.com/2019/03/02/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.linxiaodongblog.com/2019/03/02/JS设计模式-工厂模式/</id>
    <published>2019-03-02T02:36:44.000Z</published>
    <updated>2019-03-07T16:53:29.826Z</updated>
    
    <summary type="html">
    
      &lt;h5 id=&quot;什么是工厂模式&quot;&gt;&lt;a href=&quot;#什么是工厂模式&quot; class=&quot;headerlink&quot; title=&quot;什么是工厂模式&quot;&gt;&lt;/a&gt;什么是工厂模式&lt;/h5&gt;&lt;p&gt;工厂模式是我们最常用的实例化对象模式了，是用工厂方法代替new操作的一种模式。著名的Jive论坛 ,就大量使用了工厂模式，工厂模式在Java程序系统可以说是随处可见。因为工厂模式就相当于创建实例对象的new，我们经常要根据类Class生成实例对象，如A a=new A() 工厂模式也是用来创建实例对象的，所以以后new时就要多个心眼，是否可以考虑使用工厂模式，虽然这样做，可能多做一些工作，但会给你系统带来更大的可扩展性和尽量少的修改量。&lt;br&gt;属于三大设计类型中的创建型模式。&lt;br&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.linxiaodongblog.com/tags/JavaScript/"/>
    
      <category term="设计模式" scheme="http://www.linxiaodongblog.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JS设计模式-单列模式</title>
    <link href="http://www.linxiaodongblog.com/2019/03/02/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E5%88%97%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.linxiaodongblog.com/2019/03/02/JS设计模式-单列模式/</id>
    <published>2019-03-02T01:44:02.000Z</published>
    <updated>2019-03-07T16:53:27.727Z</updated>
    
    <summary type="html">
    
      &lt;h5 id=&quot;什么是单例设计模式&quot;&gt;&lt;a href=&quot;#什么是单例设计模式&quot; class=&quot;headerlink&quot; title=&quot;什么是单例设计模式&quot;&gt;&lt;/a&gt;什么是单例设计模式&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;系统中被唯一使用&lt;/li&gt;
&lt;li&gt;一个类中只有一个实例&lt;/li&gt;
&lt;li&gt;&lt;p&gt;属于三大设计类型中的创建型模式  &lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.linxiaodongblog.com/tags/JavaScript/"/>
    
      <category term="设计模式" scheme="http://www.linxiaodongblog.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
